version: '3'

services:
  # Redis
  redis:
    image: redis:7-bookworm
    container_name: redis
    restart: always
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "6379:6379"

  # PostgreSQL Database
  db:
    image: postgres:16
    restart: always
    volumes:
      - ./data/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    container_name: postgres_db

  # Django Application
  web:
    build: .
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - .:/app
    env_file:
      - .env
    ports:
      - 8000:8000
    image: app:investnaira-backend
    container_name: investnaira-backend
    command: python manage.py runserver 0.0.0.0:8000
    depends_on:
      - db

  # restarter - restarts the main server at 2AM everyday
  restarter:
    image: alpine
    command: >
      sh -c "
      apk add --no-cache docker-cli &&
      echo '0 2 * * * docker restart investnaira-backend' | crontab - &&
      crond -f -d 8
      "
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Celery Worker
  celery:
    restart: always
    build:
      context: .
    command: celery -A investnaira worker -l DEBUG
    volumes:
      - .:/app
    container_name: celery
    depends_on:
      - db
      - redis
      - web

  celery-beat:
    build: .
    command: celery -A investnaira beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    container_name: celery-beat
    depends_on:
      - db
      - redis

  client:
    build: ./nginx
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - /var/www/static/:/var/www/static/
      - /var/certbot/conf:/etc/letsencrypt:ro
      - /var/certbot/www:/var/www/certbot:ro
    depends_on:
      - web

  # port forwarding
  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    command:
      - "start"
      - "--all"
      - "--config"
      - "/etc/ngrok.yml"
    volumes:
      - ./ngrok.yml:/etc/ngrok.yml
    ports:
      - 4040:4040

  certbot:
    image: certbot/certbot:latest
    volumes:
      - /var/certbot/conf:/etc/letsencrypt/:rw
      - /var/certbot/www/:/var/www/certbot/:rw
    depends_on:
      - client
